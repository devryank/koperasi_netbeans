/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Transactions;

import Koneksi.Koneksi;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.Date;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ryans
 */
public class Add extends javax.swing.JFrame {
private Connection conn = new Koneksi().getConnection();
private DefaultTableModel tabmode;
private String product_code = "";
private int typeId, total, price = 0;

    /**
     * Creates new form Add
     */
    public Add() {
        initComponents();
        setLocationRelativeTo(this);
        datatable();
    }
 protected void datatable() {
        Object[] Baris = {
            "Kode", 
            "Nama",
            "Jenis",
            "Stok",
            "Harga",
        };
        tabmode = new DefaultTableModel(null, Baris);
        String cariitem = txtcari.getText();
        
        try {
            String sql = "SELECT p.*, c.name as category_name, (SELECT case ((SELECT SUM(amount) FROM entries e where e.product_code = p.product_code) - (SELECT SUM(amount) from transactions t where t.product_code = p.product_code)) when 0 then \"stok habis\" ELSE ((SELECT SUM(amount) FROM entries e where e.product_code = p.product_code) - (SELECT SUM(amount) from transactions t where t.product_code = p.product_code)) end) as stock from products p INNER JOIN categories c ON p.category_id = c.id INNER JOIN entries e ON e.product_code = p.product_code INNER JOIN transactions t ON t.product_code = p.product_code where p.product_code like '%"+cariitem+"%' or p.name like '%"+cariitem+"%' group by p.product_code order by p.product_code asc;";
            Statement stat = conn.createStatement();
            ResultSet hasil = stat.executeQuery(sql);
            while(hasil.next()) {
                tabmode.addRow(new Object[] {
                    hasil.getString("product_code"),
                    hasil.getString("name"),
                    hasil.getString("category_name"),
                    hasil.getString("stock"),
                    hasil.getString("price"),
                });
            }
            tblProducts.setModel(tabmode);
        } catch(Exception e) {
            JOptionPane.showMessageDialog(null, "data gagal dipanggil"+e);
        }       
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProducts = new javax.swing.JTable();
        txtcari = new javax.swing.JTextField();
        bcari = new javax.swing.JButton();
        addToCart = new javax.swing.JButton();
        amount = new javax.swing.JTextField();
        productName = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(223, 230, 233));

        tblProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblProducts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProductsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblProducts);

        txtcari.setName("txtcari"); // NOI18N

        bcari.setBackground(new java.awt.Color(41, 128, 185));
        bcari.setForeground(new java.awt.Color(255, 255, 255));
        bcari.setText("Cari");
        bcari.setName("bcari"); // NOI18N
        bcari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bcariActionPerformed(evt);
            }
        });

        addToCart.setBackground(new java.awt.Color(41, 128, 185));
        addToCart.setForeground(new java.awt.Color(255, 255, 255));
        addToCart.setText("Tambah ke Keranjang");
        addToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCartActionPerformed(evt);
            }
        });

        amount.setToolTipText("Jumlah");
        amount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amountActionPerformed(evt);
            }
        });

        productName.setText("Nama Produk");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(txtcari, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(bcari))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(productName)
                                .addGap(18, 18, 18)
                                .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addToCart)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtcari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bcari))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addToCart, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productName))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bcariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bcariActionPerformed
        datatable();
    }//GEN-LAST:event_bcariActionPerformed

    private void addToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCartActionPerformed
        if(product_code != "" && amount.getText() != "" && productName.getText() != "Error") {
            int amountTrx = 0;
            int amountEntries = 0;
               try {
                    String sqlAmountTrx = "SELECT SUM(amount) as amount FROM transactions where product_code = '" + product_code + "';";
                    Statement statAmountTrx = conn.createStatement();
                    ResultSet rs = statAmountTrx.executeQuery(sqlAmountTrx);
                    if(rs.next()) {
                      amountTrx = rs.getInt("amount");
                      System.out.println(amountTrx);
                    }
               } catch(SQLException e) {
                   JOptionPane.showMessageDialog(null, "gagal"+e);
               }
               
               try {
                    String sqlAmountEntries = "SELECT SUM(amount) as amount FROM entries where product_code = '" + product_code + "';";
                    Statement statAmountEntries = conn.createStatement();
                    ResultSet rs = statAmountEntries.executeQuery(sqlAmountEntries);
                    if(rs.next()) {
                      amountEntries = rs.getInt("amount");
                      System.out.println(amountEntries);
                    }
               } catch(SQLException e) {
                   JOptionPane.showMessageDialog(null, "data gagal dipanggil"+e);
               }
               
               int stock = amountEntries - amountTrx;
               
               if(stock == 0) {
                   JOptionPane.showMessageDialog(null, "stok habis");
               } else if(stock - Integer.parseInt(amount.getText()) < 0) {
                   JOptionPane.showMessageDialog(null, "stok hanya tersisa " + stock);
               } else {
//                   get last invoice id            
                    try {
                        String sqlLastInvoiceId = "SELECT inv_id, is_done FROM transactions order by created_at desc limit 1";
                        Statement statLastInvoiceId = conn.createStatement();
                        ResultSet rs = statLastInvoiceId.executeQuery(sqlLastInvoiceId);
                        String lastInvoice = "";
                        String is_done = "";
                        if(rs.next()) {
                          lastInvoice = rs.getString("inv_id");
                          lastInvoice = lastInvoice.substring(lastInvoice.lastIndexOf("-") + 1);
                          is_done = rs.getString("is_done");
                        }

                        int orderToday = 0;
                        String orderNow = "";
                        String invNow = "";
                        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("ddMMyyyy");
                        LocalDateTime now = LocalDateTime.now();

                        if(lastInvoice != "") {
                            String dateLastOrder = lastInvoice.substring(0, 8);
        //                    jika tanggal transaksi terakhir sama dengan transaksi hari ini
                            if(dateLastOrder.equals(dtf.format(now))) {                        
        //                      jika transaksi terakhir sudah selesai maka buat invoice + 1
                                if(is_done.equals("1")) {
                                orderToday = Integer.valueOf(lastInvoice.substring(lastInvoice.length() - 3));
                                orderNow = String.format("%03d", orderToday+1);
                                invNow = "INV-" + dateLastOrder + orderNow;

                                } else {
            //                      jika transaksi terakhir belum selesai
                                    orderToday = Integer.valueOf(lastInvoice.substring(lastInvoice.length() - 3));
                                    orderNow = String.format("%03d", orderToday);
                                    invNow = "INV-" + dateLastOrder + orderNow;
                                }
                            } else {
                                // jika tanggal transaksi terakhir tidak sama dengan transaksi hari ini
                                invNow = "INV-" + dtf.format(now) + "001";
                            }   
                        } else {
                            invNow = "INV-" + dtf.format(now) + "001";
                        }
                        String sql = "insert into transactions values(0,?,?,?,?,?,NOW())";
                        PreparedStatement stat = conn.prepareStatement(sql);
                        stat.setString(1, invNow);
                        stat.setString(2, product_code);
                        stat.setString(3, amount.getText());
                        stat.setInt(4, Integer.parseInt(amount.getText()) * price);
                        stat.setString(5, "0");

                        stat.executeUpdate();
                        JOptionPane.showMessageDialog(null, "data berhasil disimpan");
                    }
                    catch (SQLException e) {
                        JOptionPane.showMessageDialog(null, "data gagal disimpan"+e);
                    }
                Form form = new Form();
                form.setVisible(true);
                dispose();
               }
        }
    }//GEN-LAST:event_addToCartActionPerformed

    private void amountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_amountActionPerformed

    private void tblProductsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductsMouseClicked
        int row = tblProducts.rowAtPoint(evt.getPoint());
        int col = tblProducts.columnAtPoint(evt.getPoint());
        try {
            product_code = (String) tblProducts.getModel().getValueAt(row, col);

            String sqlSearchId = "SELECT product_code, name, category_id, price FROM products where product_code = '"+product_code+"'";
            Statement statId = conn.createStatement();
            ResultSet rs = statId.executeQuery(sqlSearchId);
            if(rs.next()) {
                productName.setText(rs.getString("name"));
                typeId = rs.getInt("category_id");
                price = rs.getInt("price");
            } else {
                productName.setText("Error");
            }
        }
        catch(NumberFormatException | SQLException e) {
            product_code = "";
            System.out.println(e);
        }
    }//GEN-LAST:event_tblProductsMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Add.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Add.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Add.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Add.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Add().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToCart;
    private javax.swing.JTextField amount;
    private javax.swing.JButton bcari;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel productName;
    private javax.swing.JTable tblProducts;
    private javax.swing.JTextField txtcari;
    // End of variables declaration//GEN-END:variables
}
